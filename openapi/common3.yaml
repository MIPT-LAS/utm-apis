openapi: 3.0.0
info:
  description: |-
    This file contains the core UTM models as OpenAPI 2.0 compliant definitions.
    Some key caveats when using/referencing this API:
      1. The API on its own is insufficeint to develop a USS or other UTM
      component.  For example, the USS Specification is needed to understand
      how and when to use the various endpoints and provides more details on
      security features that cannot be captured in the API docs.
      2. There is not a unified time synchronization approach in UTM currently.
      As such, times provided from one server MUST NOT be validated against each other.
      For example, if a sending server states that a data element
      was sent at 10:00:23, but the receiving server thinks it is currently
      10:00:22, the receiving server must not reject the data submission.  As
      we develop and roll out the time synchronization scheme for the USS
      Network, we will add appropriate validation requirements to the API
      documentation.
      3. On the contrary, times must be validated for consistency within a
      given data submission.  For example, if a server states that it sends
      a data instance at 10:00:23 and one of the other data elements states
      that a measurement was performed at 10:00:24, then the receiving server
      must reject that data submission. Some of these checks are explictly
      stated in the descriptions below. If you recognize any such checks that
      are not documented, please submit an issue report on github.
      4. These token SUBJECT validations are required for security.
      For PUT Operation to modify an existing operation, the token SUBJECT claim upon modification MUST equal the token SUBJECT claim for the initial Operation.
      For PUT Message associated with an Operation gufi, the token SUBJECT claim used for PUT Message MUST equal the token SUBJECT claim for the initial operation.
        This check is performed if the initial operation exists, so as to not preclude receiving emergency messages.
      For PUT Position associated with an Operation gufi, the token SUBJECT claim used for PUT Position MUST equal the token SUBJECT claim for the initial operation.
        This check is performed only if the initial operation exists, so as to not preclude receiving emergency position reports.
  version: "1.0.0-oas3"
  title: UTM models
paths:
  /no-paths:
    put:
      responses:
        '410':
          description: >-
            Gone. Not implemented. Will not be implemented. Path included for
            proper use by automated tooling.
components:
  schemas:
    timestamp:
      description: >-
        Timestamps MUST follow the guidance set forth in RFC3339. This RFC
        defines a profile for ISO8601 forcused on interoperability of Internet
        based systems.  This profile makes certain design decisions based on
        reducing rarely used options, elimination of redundant information, and
        overall simplicity.

        From these goals and insight from building interoperable systems,
        RFC3339 provides a grammar for timestamps.  Please see

        https://tools.ietf.org/html/rfc3339#section-5.6

        for that grammer and the sections preceding that grammar for more
        detailed discussion.

        For UTM, we have attempted to reduce the grammar to a regular
        expression, but this does not take into account all rules.  For example,
        a valid timestamp should not allow 30 days in February, but this is not
        in the regular expression.  Likewise, leap years are not captured in the
        regular expression.  Thus it is possible for a timestamp to satisfy this
        RE, but still not be valid and, thus, be rejected by some components of
        UTM.

        Note that this UTM format specifies millisecond precision for all time
        stamps.  This is why the min and max length are fixed at 24.

        Note that this UTM format specifies UTC time indicated by a trailing
        'Z'.

        Note taht this UTM format specifies date and time separation with a 'T'.
      type: string
      format: iso8601
      minLength: 24
      maxLength: 24
      pattern: >-
        ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$